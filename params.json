{"name":"Rsa","tagline":"Cryptography‬","body":"### Welcome to GitHub Pages.\r\n### Progam 1: **[RSA](http://en.wikipedia.org/wiki/RSA_problem)**\r\nChương trình cài đặt hàm cửa sập RSA thỏa mãn:\r\n* Các số nguyên tố `p, q` là số `3072` bits, có nghĩa rằng modulo `N` khoảng `6142` bits.\r\n> Chú ý: Trên thực tế N khoảng 2048 bit là đủ an toàn. Ở đây ta sử dụng số N lớn chỉ nhằm để test hiệu năng chương trình.\r\n* Khóa bí mật `(N, d)` thỏa mãn `d > N^(1/4)`.\r\n* Khóa công khai `(N, e)` thỏa mãn `e > 3`.\r\n<br/>\r\n# Thuật toán\r\n**RSA Encode** `((N, e),m)`\r\nInput:\r\n1. `(N,_e_)` RSA public key\r\n2. `_m_` message representative, an integer between `0` and `N-1`\r\nOutput: c ciphertext representative, an integer between `0` and `N-1`\r\n\r\n**Code**:\r\n```\r\n                p = new GenPrime().genPrime(bitlen/2);\r\n\t\tq = new GenPrime().genPrime(bitlen/2);\r\n\t\tn = p.multiply(q);\r\n\t\tBigInteger m = (p.subtract(BigInteger.ONE)).multiply(q\r\n\t\t\t\t.subtract(BigInteger.ONE)); // m = (p-1) * (q-1)\r\n\t\t\r\n\t\te = new BigInteger(\"3\");\r\n\t\twhile (m.gcd(e).intValue() > 1) {\r\n\t\t\te = e.add(new BigInteger(\"2\"));\r\n\t\t}\r\n\t\td = e.modInverse(m);\r\n```\r\n\r\n**Decode**\r\n```\r\n        public synchronized String decrypt(String message) {\r\n\t\treturn new String((new BigInteger(message)).modPow(d, n).toByteArray());\r\n\t}\r\n```\r\n***\r\n### Progam 2:","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}